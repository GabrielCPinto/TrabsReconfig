Simulator report for Stack
Wed May 11 11:32:22 2022
Quartus II Version 9.1 Build 350 03/24/2010 Service Pack 2 SJ Web Edition


---------------------
; Table of Contents ;
---------------------
  1. Legal Notice
  2. Simulator Summary
  3. Simulator Settings
  4. Simulation Waveforms
  5. Coverage Summary
  6. Complete 1/0-Value Coverage
  7. Missing 1-Value Coverage
  8. Missing 0-Value Coverage
  9. Simulator INI Usage
 10. Simulator Messages



----------------
; Legal Notice ;
----------------
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.



+--------------------------------------------+
; Simulator Summary                          ;
+-----------------------------+--------------+
; Type                        ; Value        ;
+-----------------------------+--------------+
; Simulation Start Time       ; 0 ps         ;
; Simulation End Time         ; 1.0 us       ;
; Simulation Netlist Size     ; 264 nodes    ;
; Simulation Coverage         ;      31.06 % ;
; Total Number of Transitions ; 2419         ;
; Simulation Breakpoints      ; 0            ;
; Family                      ; Cyclone II   ;
; Device                      ; EP2C35F672C6 ;
+-----------------------------+--------------+


+-------------------------------------------------------------------------------------------------------------------------+
; Simulator Settings                                                                                                      ;
+--------------------------------------------------------------------------------------------+------------+---------------+
; Option                                                                                     ; Setting    ; Default Value ;
+--------------------------------------------------------------------------------------------+------------+---------------+
; Simulation mode                                                                            ; Timing     ; Timing        ;
; Start time                                                                                 ; 0 ns       ; 0 ns          ;
; Simulation results format                                                                  ; CVWF       ;               ;
; Add pins automatically to simulation output waveforms                                      ; On         ; On            ;
; Check outputs                                                                              ; Off        ; Off           ;
; Report simulation coverage                                                                 ; On         ; On            ;
; Display complete 1/0 value coverage report                                                 ; On         ; On            ;
; Display missing 1-value coverage report                                                    ; On         ; On            ;
; Display missing 0-value coverage report                                                    ; On         ; On            ;
; Detect setup and hold time violations                                                      ; Off        ; Off           ;
; Detect glitches                                                                            ; Off        ; Off           ;
; Disable timing delays in Timing Simulation                                                 ; Off        ; Off           ;
; Generate Signal Activity File                                                              ; Off        ; Off           ;
; Generate VCD File for PowerPlay Power Analyzer                                             ; Off        ; Off           ;
; Group bus channels in simulation results                                                   ; Off        ; Off           ;
; Preserve fewer signal transitions to reduce memory requirements                            ; On         ; On            ;
; Trigger vector comparison with the specified mode                                          ; INPUT_EDGE ; INPUT_EDGE    ;
; Disable setup and hold time violations detection in input registers of bi-directional pins ; Off        ; Off           ;
; Overwrite Waveform Inputs With Simulation Outputs                                          ; On         ;               ;
; Perform Glitch Filtering in Timing Simulation                                              ; Auto       ; Auto          ;
+--------------------------------------------------------------------------------------------+------------+---------------+


+----------------------+
; Simulation Waveforms ;
+----------------------+
Waveform report data cannot be output to ASCII.
Please use Quartus II to view the waveform report data.


+--------------------------------------------------------------------+
; Coverage Summary                                                   ;
+-----------------------------------------------------+--------------+
; Type                                                ; Value        ;
+-----------------------------------------------------+--------------+
; Total coverage as a percentage                      ;      31.06 % ;
; Total nodes checked                                 ; 264          ;
; Total output ports checked                          ; 264          ;
; Total output ports with complete 1/0-value coverage ; 82           ;
; Total output ports with no 1/0-value coverage       ; 180          ;
; Total output ports with no 1-value coverage         ; 180          ;
; Total output ports with no 0-value coverage         ; 182          ;
+-----------------------------------------------------+--------------+


The following table displays output ports that toggle between 1 and 0 during simulation.
+------------------------------------------------------------------------------------+
; Complete 1/0-Value Coverage                                                        ;
+--------------------------------+--------------------------------+------------------+
; Node Name                      ; Output Port Name               ; Output Port Type ;
+--------------------------------+--------------------------------+------------------+
; |Stack|stack_out[2]~reg0       ; |Stack|stack_out[2]~reg0       ; regout           ;
; |Stack|stack_out[3]~reg0       ; |Stack|stack_out[3]~reg0       ; regout           ;
; |Stack|stack_out[4]~reg0       ; |Stack|stack_out[4]~reg0       ; regout           ;
; |Stack|stack_out[5]~reg0       ; |Stack|stack_out[5]~reg0       ; regout           ;
; |Stack|stack_out[6]~reg0       ; |Stack|stack_out[6]~reg0       ; regout           ;
; |Stack|stack_out[7]~reg0       ; |Stack|stack_out[7]~reg0       ; regout           ;
; |Stack|stack_reg0[2]           ; |Stack|stack_reg0[2]           ; regout           ;
; |Stack|stack_reg0[3]           ; |Stack|stack_reg0[3]           ; regout           ;
; |Stack|stack_reg0[4]           ; |Stack|stack_reg0[4]           ; regout           ;
; |Stack|stack_reg0[5]           ; |Stack|stack_reg0[5]           ; regout           ;
; |Stack|stack_reg0[6]           ; |Stack|stack_reg0[6]           ; regout           ;
; |Stack|stack_reg0[7]           ; |Stack|stack_reg0[7]           ; regout           ;
; |Stack|stack_reg0[0]~1         ; |Stack|stack_reg0[0]~1         ; combout          ;
; |Stack|stack_reg1[2]           ; |Stack|stack_reg1[2]           ; regout           ;
; |Stack|stack_reg0~3            ; |Stack|stack_reg0~3            ; combout          ;
; |Stack|stack_reg1[3]           ; |Stack|stack_reg1[3]           ; regout           ;
; |Stack|stack_reg0~4            ; |Stack|stack_reg0~4            ; combout          ;
; |Stack|stack_reg1[4]           ; |Stack|stack_reg1[4]           ; regout           ;
; |Stack|stack_reg0~5            ; |Stack|stack_reg0~5            ; combout          ;
; |Stack|stack_reg1[5]           ; |Stack|stack_reg1[5]           ; regout           ;
; |Stack|stack_reg0~6            ; |Stack|stack_reg0~6            ; combout          ;
; |Stack|stack_reg1[6]           ; |Stack|stack_reg1[6]           ; regout           ;
; |Stack|stack_reg0~7            ; |Stack|stack_reg0~7            ; combout          ;
; |Stack|stack_reg1[7]           ; |Stack|stack_reg1[7]           ; regout           ;
; |Stack|stack_reg0~8            ; |Stack|stack_reg0~8            ; combout          ;
; |Stack|stack_reg2[2]           ; |Stack|stack_reg2[2]           ; regout           ;
; |Stack|stack_reg1~2            ; |Stack|stack_reg1~2            ; combout          ;
; |Stack|stack_reg2[3]           ; |Stack|stack_reg2[3]           ; regout           ;
; |Stack|stack_reg1~3            ; |Stack|stack_reg1~3            ; combout          ;
; |Stack|stack_reg2[4]           ; |Stack|stack_reg2[4]           ; regout           ;
; |Stack|stack_reg1~4            ; |Stack|stack_reg1~4            ; combout          ;
; |Stack|stack_reg2[5]           ; |Stack|stack_reg2[5]           ; regout           ;
; |Stack|stack_reg1~5            ; |Stack|stack_reg1~5            ; combout          ;
; |Stack|stack_reg2[6]           ; |Stack|stack_reg2[6]           ; regout           ;
; |Stack|stack_reg1~6            ; |Stack|stack_reg1~6            ; combout          ;
; |Stack|stack_reg2[7]           ; |Stack|stack_reg2[7]           ; regout           ;
; |Stack|stack_reg1~7            ; |Stack|stack_reg1~7            ; combout          ;
; |Stack|stack_reg3[2]           ; |Stack|stack_reg3[2]           ; regout           ;
; |Stack|stack_reg2~2            ; |Stack|stack_reg2~2            ; combout          ;
; |Stack|stack_reg3[3]           ; |Stack|stack_reg3[3]           ; regout           ;
; |Stack|stack_reg2~3            ; |Stack|stack_reg2~3            ; combout          ;
; |Stack|stack_reg3[4]           ; |Stack|stack_reg3[4]           ; regout           ;
; |Stack|stack_reg2~4            ; |Stack|stack_reg2~4            ; combout          ;
; |Stack|stack_reg3[5]           ; |Stack|stack_reg3[5]           ; regout           ;
; |Stack|stack_reg2~5            ; |Stack|stack_reg2~5            ; combout          ;
; |Stack|stack_reg3[6]           ; |Stack|stack_reg3[6]           ; regout           ;
; |Stack|stack_reg2~6            ; |Stack|stack_reg2~6            ; combout          ;
; |Stack|stack_reg3[7]           ; |Stack|stack_reg3[7]           ; regout           ;
; |Stack|stack_reg2~7            ; |Stack|stack_reg2~7            ; combout          ;
; |Stack|stack_reg4[2]           ; |Stack|stack_reg4[2]           ; regout           ;
; |Stack|stack_reg3~2            ; |Stack|stack_reg3~2            ; combout          ;
; |Stack|stack_reg4[3]           ; |Stack|stack_reg4[3]           ; regout           ;
; |Stack|stack_reg3~3            ; |Stack|stack_reg3~3            ; combout          ;
; |Stack|stack_reg4[4]           ; |Stack|stack_reg4[4]           ; regout           ;
; |Stack|stack_reg3~4            ; |Stack|stack_reg3~4            ; combout          ;
; |Stack|stack_reg4[5]           ; |Stack|stack_reg4[5]           ; regout           ;
; |Stack|stack_reg3~5            ; |Stack|stack_reg3~5            ; combout          ;
; |Stack|stack_reg4[6]           ; |Stack|stack_reg4[6]           ; regout           ;
; |Stack|stack_reg3~6            ; |Stack|stack_reg3~6            ; combout          ;
; |Stack|stack_reg4[7]           ; |Stack|stack_reg4[7]           ; regout           ;
; |Stack|stack_reg3~7            ; |Stack|stack_reg3~7            ; combout          ;
; |Stack|stack_reg4~2            ; |Stack|stack_reg4~2            ; combout          ;
; |Stack|stack_reg4~3            ; |Stack|stack_reg4~3            ; combout          ;
; |Stack|stack_reg4~4            ; |Stack|stack_reg4~4            ; combout          ;
; |Stack|stack_reg4~5            ; |Stack|stack_reg4~5            ; combout          ;
; |Stack|stack_reg4~6            ; |Stack|stack_reg4~6            ; combout          ;
; |Stack|stack_reg4~7            ; |Stack|stack_reg4~7            ; combout          ;
; |Stack|stack_out[2]            ; |Stack|stack_out[2]            ; padio            ;
; |Stack|stack_out[3]            ; |Stack|stack_out[3]            ; padio            ;
; |Stack|stack_out[4]            ; |Stack|stack_out[4]            ; padio            ;
; |Stack|stack_out[5]            ; |Stack|stack_out[5]            ; padio            ;
; |Stack|stack_out[6]            ; |Stack|stack_out[6]            ; padio            ;
; |Stack|stack_out[7]            ; |Stack|stack_out[7]            ; padio            ;
; |Stack|clk_in                  ; |Stack|clk_in~corein           ; combout          ;
; |Stack|stack_pop               ; |Stack|stack_pop~corein        ; combout          ;
; |Stack|stack_push              ; |Stack|stack_push~corein       ; combout          ;
; |Stack|clk_in~clkctrl          ; |Stack|clk_in~clkctrl          ; outclk           ;
; |Stack|stack_out[2]~reg0feeder ; |Stack|stack_out[2]~reg0feeder ; combout          ;
; |Stack|stack_out[3]~reg0feeder ; |Stack|stack_out[3]~reg0feeder ; combout          ;
; |Stack|stack_out[4]~reg0feeder ; |Stack|stack_out[4]~reg0feeder ; combout          ;
; |Stack|stack_out[6]~reg0feeder ; |Stack|stack_out[6]~reg0feeder ; combout          ;
; |Stack|stack_out[7]~reg0feeder ; |Stack|stack_out[7]~reg0feeder ; combout          ;
+--------------------------------+--------------------------------+------------------+


The following table displays output ports that do not toggle to 1 during simulation.
+--------------------------------------------------------------------------------------+
; Missing 1-Value Coverage                                                             ;
+---------------------------------+---------------------------------+------------------+
; Node Name                       ; Output Port Name                ; Output Port Type ;
+---------------------------------+---------------------------------+------------------+
; |Stack|stack_out[0]~reg0        ; |Stack|stack_out[0]~reg0        ; regout           ;
; |Stack|stack_out[1]~reg0        ; |Stack|stack_out[1]~reg0        ; regout           ;
; |Stack|stack_out[8]~reg0        ; |Stack|stack_out[8]~reg0        ; regout           ;
; |Stack|stack_out[9]~reg0        ; |Stack|stack_out[9]~reg0        ; regout           ;
; |Stack|stack_out[10]~reg0       ; |Stack|stack_out[10]~reg0       ; regout           ;
; |Stack|stack_out[11]~reg0       ; |Stack|stack_out[11]~reg0       ; regout           ;
; |Stack|stack_out[12]~reg0       ; |Stack|stack_out[12]~reg0       ; regout           ;
; |Stack|stack_reg0[0]            ; |Stack|stack_reg0[0]            ; regout           ;
; |Stack|stack_reg0[1]            ; |Stack|stack_reg0[1]            ; regout           ;
; |Stack|stack_reg0[8]            ; |Stack|stack_reg0[8]            ; regout           ;
; |Stack|stack_reg0[9]            ; |Stack|stack_reg0[9]            ; regout           ;
; |Stack|stack_reg0[10]           ; |Stack|stack_reg0[10]           ; regout           ;
; |Stack|stack_reg0[11]           ; |Stack|stack_reg0[11]           ; regout           ;
; |Stack|stack_reg0[12]           ; |Stack|stack_reg0[12]           ; regout           ;
; |Stack|stack_reg1[0]            ; |Stack|stack_reg1[0]            ; regout           ;
; |Stack|stack_reg0~0             ; |Stack|stack_reg0~0             ; combout          ;
; |Stack|stack_reg1[1]            ; |Stack|stack_reg1[1]            ; regout           ;
; |Stack|stack_reg0~2             ; |Stack|stack_reg0~2             ; combout          ;
; |Stack|stack_reg1[8]            ; |Stack|stack_reg1[8]            ; regout           ;
; |Stack|stack_reg0~9             ; |Stack|stack_reg0~9             ; combout          ;
; |Stack|stack_reg1[9]            ; |Stack|stack_reg1[9]            ; regout           ;
; |Stack|stack_reg0~10            ; |Stack|stack_reg0~10            ; combout          ;
; |Stack|stack_reg1[10]           ; |Stack|stack_reg1[10]           ; regout           ;
; |Stack|stack_reg0~11            ; |Stack|stack_reg0~11            ; combout          ;
; |Stack|stack_reg1[11]           ; |Stack|stack_reg1[11]           ; regout           ;
; |Stack|stack_reg0~12            ; |Stack|stack_reg0~12            ; combout          ;
; |Stack|stack_reg1[12]           ; |Stack|stack_reg1[12]           ; regout           ;
; |Stack|stack_reg0~13            ; |Stack|stack_reg0~13            ; combout          ;
; |Stack|stack_reg2[0]            ; |Stack|stack_reg2[0]            ; regout           ;
; |Stack|stack_reg1~0             ; |Stack|stack_reg1~0             ; combout          ;
; |Stack|stack_reg2[1]            ; |Stack|stack_reg2[1]            ; regout           ;
; |Stack|stack_reg1~1             ; |Stack|stack_reg1~1             ; combout          ;
; |Stack|stack_reg2[8]            ; |Stack|stack_reg2[8]            ; regout           ;
; |Stack|stack_reg1~8             ; |Stack|stack_reg1~8             ; combout          ;
; |Stack|stack_reg2[9]            ; |Stack|stack_reg2[9]            ; regout           ;
; |Stack|stack_reg1~9             ; |Stack|stack_reg1~9             ; combout          ;
; |Stack|stack_reg2[10]           ; |Stack|stack_reg2[10]           ; regout           ;
; |Stack|stack_reg1~10            ; |Stack|stack_reg1~10            ; combout          ;
; |Stack|stack_reg2[11]           ; |Stack|stack_reg2[11]           ; regout           ;
; |Stack|stack_reg1~11            ; |Stack|stack_reg1~11            ; combout          ;
; |Stack|stack_reg2[12]           ; |Stack|stack_reg2[12]           ; regout           ;
; |Stack|stack_reg1~12            ; |Stack|stack_reg1~12            ; combout          ;
; |Stack|stack_reg3[0]            ; |Stack|stack_reg3[0]            ; regout           ;
; |Stack|stack_reg2~0             ; |Stack|stack_reg2~0             ; combout          ;
; |Stack|stack_reg3[1]            ; |Stack|stack_reg3[1]            ; regout           ;
; |Stack|stack_reg2~1             ; |Stack|stack_reg2~1             ; combout          ;
; |Stack|stack_reg3[8]            ; |Stack|stack_reg3[8]            ; regout           ;
; |Stack|stack_reg2~8             ; |Stack|stack_reg2~8             ; combout          ;
; |Stack|stack_reg3[9]            ; |Stack|stack_reg3[9]            ; regout           ;
; |Stack|stack_reg2~9             ; |Stack|stack_reg2~9             ; combout          ;
; |Stack|stack_reg3[10]           ; |Stack|stack_reg3[10]           ; regout           ;
; |Stack|stack_reg2~10            ; |Stack|stack_reg2~10            ; combout          ;
; |Stack|stack_reg3[11]           ; |Stack|stack_reg3[11]           ; regout           ;
; |Stack|stack_reg2~11            ; |Stack|stack_reg2~11            ; combout          ;
; |Stack|stack_reg3[12]           ; |Stack|stack_reg3[12]           ; regout           ;
; |Stack|stack_reg2~12            ; |Stack|stack_reg2~12            ; combout          ;
; |Stack|stack_reg4[0]            ; |Stack|stack_reg4[0]            ; regout           ;
; |Stack|stack_reg3~0             ; |Stack|stack_reg3~0             ; combout          ;
; |Stack|stack_reg4[1]            ; |Stack|stack_reg4[1]            ; regout           ;
; |Stack|stack_reg3~1             ; |Stack|stack_reg3~1             ; combout          ;
; |Stack|stack_reg4[8]            ; |Stack|stack_reg4[8]            ; regout           ;
; |Stack|stack_reg3~8             ; |Stack|stack_reg3~8             ; combout          ;
; |Stack|stack_reg4[9]            ; |Stack|stack_reg4[9]            ; regout           ;
; |Stack|stack_reg3~9             ; |Stack|stack_reg3~9             ; combout          ;
; |Stack|stack_reg4[10]           ; |Stack|stack_reg4[10]           ; regout           ;
; |Stack|stack_reg3~10            ; |Stack|stack_reg3~10            ; combout          ;
; |Stack|stack_reg4[11]           ; |Stack|stack_reg4[11]           ; regout           ;
; |Stack|stack_reg3~11            ; |Stack|stack_reg3~11            ; combout          ;
; |Stack|stack_reg4[12]           ; |Stack|stack_reg4[12]           ; regout           ;
; |Stack|stack_reg3~12            ; |Stack|stack_reg3~12            ; combout          ;
; |Stack|stack_reg5[0]            ; |Stack|stack_reg5[0]            ; regout           ;
; |Stack|stack_reg4~0             ; |Stack|stack_reg4~0             ; combout          ;
; |Stack|stack_reg5[1]            ; |Stack|stack_reg5[1]            ; regout           ;
; |Stack|stack_reg4~1             ; |Stack|stack_reg4~1             ; combout          ;
; |Stack|stack_reg5[2]            ; |Stack|stack_reg5[2]            ; regout           ;
; |Stack|stack_reg5[3]            ; |Stack|stack_reg5[3]            ; regout           ;
; |Stack|stack_reg5[4]            ; |Stack|stack_reg5[4]            ; regout           ;
; |Stack|stack_reg5[5]            ; |Stack|stack_reg5[5]            ; regout           ;
; |Stack|stack_reg5[6]            ; |Stack|stack_reg5[6]            ; regout           ;
; |Stack|stack_reg5[7]            ; |Stack|stack_reg5[7]            ; regout           ;
; |Stack|stack_reg5[8]            ; |Stack|stack_reg5[8]            ; regout           ;
; |Stack|stack_reg4~8             ; |Stack|stack_reg4~8             ; combout          ;
; |Stack|stack_reg5[9]            ; |Stack|stack_reg5[9]            ; regout           ;
; |Stack|stack_reg4~9             ; |Stack|stack_reg4~9             ; combout          ;
; |Stack|stack_reg5[10]           ; |Stack|stack_reg5[10]           ; regout           ;
; |Stack|stack_reg4~10            ; |Stack|stack_reg4~10            ; combout          ;
; |Stack|stack_reg5[11]           ; |Stack|stack_reg5[11]           ; regout           ;
; |Stack|stack_reg4~11            ; |Stack|stack_reg4~11            ; combout          ;
; |Stack|stack_reg5[12]           ; |Stack|stack_reg5[12]           ; regout           ;
; |Stack|stack_reg4~12            ; |Stack|stack_reg4~12            ; combout          ;
; |Stack|stack_reg6[0]            ; |Stack|stack_reg6[0]            ; regout           ;
; |Stack|stack_reg5~0             ; |Stack|stack_reg5~0             ; combout          ;
; |Stack|stack_reg6[1]            ; |Stack|stack_reg6[1]            ; regout           ;
; |Stack|stack_reg5~1             ; |Stack|stack_reg5~1             ; combout          ;
; |Stack|stack_reg6[2]            ; |Stack|stack_reg6[2]            ; regout           ;
; |Stack|stack_reg5~2             ; |Stack|stack_reg5~2             ; combout          ;
; |Stack|stack_reg6[3]            ; |Stack|stack_reg6[3]            ; regout           ;
; |Stack|stack_reg5~3             ; |Stack|stack_reg5~3             ; combout          ;
; |Stack|stack_reg6[4]            ; |Stack|stack_reg6[4]            ; regout           ;
; |Stack|stack_reg5~4             ; |Stack|stack_reg5~4             ; combout          ;
; |Stack|stack_reg6[5]            ; |Stack|stack_reg6[5]            ; regout           ;
; |Stack|stack_reg5~5             ; |Stack|stack_reg5~5             ; combout          ;
; |Stack|stack_reg6[6]            ; |Stack|stack_reg6[6]            ; regout           ;
; |Stack|stack_reg5~6             ; |Stack|stack_reg5~6             ; combout          ;
; |Stack|stack_reg6[7]            ; |Stack|stack_reg6[7]            ; regout           ;
; |Stack|stack_reg5~7             ; |Stack|stack_reg5~7             ; combout          ;
; |Stack|stack_reg6[8]            ; |Stack|stack_reg6[8]            ; regout           ;
; |Stack|stack_reg5~8             ; |Stack|stack_reg5~8             ; combout          ;
; |Stack|stack_reg6[9]            ; |Stack|stack_reg6[9]            ; regout           ;
; |Stack|stack_reg5~9             ; |Stack|stack_reg5~9             ; combout          ;
; |Stack|stack_reg6[10]           ; |Stack|stack_reg6[10]           ; regout           ;
; |Stack|stack_reg5~10            ; |Stack|stack_reg5~10            ; combout          ;
; |Stack|stack_reg6[11]           ; |Stack|stack_reg6[11]           ; regout           ;
; |Stack|stack_reg5~11            ; |Stack|stack_reg5~11            ; combout          ;
; |Stack|stack_reg6[12]           ; |Stack|stack_reg6[12]           ; regout           ;
; |Stack|stack_reg5~12            ; |Stack|stack_reg5~12            ; combout          ;
; |Stack|stack_reg7[0]            ; |Stack|stack_reg7[0]            ; regout           ;
; |Stack|stack_reg6~0             ; |Stack|stack_reg6~0             ; combout          ;
; |Stack|stack_reg7[1]            ; |Stack|stack_reg7[1]            ; regout           ;
; |Stack|stack_reg6~1             ; |Stack|stack_reg6~1             ; combout          ;
; |Stack|stack_reg7[2]            ; |Stack|stack_reg7[2]            ; regout           ;
; |Stack|stack_reg6~2             ; |Stack|stack_reg6~2             ; combout          ;
; |Stack|stack_reg7[3]            ; |Stack|stack_reg7[3]            ; regout           ;
; |Stack|stack_reg6~3             ; |Stack|stack_reg6~3             ; combout          ;
; |Stack|stack_reg7[4]            ; |Stack|stack_reg7[4]            ; regout           ;
; |Stack|stack_reg6~4             ; |Stack|stack_reg6~4             ; combout          ;
; |Stack|stack_reg7[5]            ; |Stack|stack_reg7[5]            ; regout           ;
; |Stack|stack_reg6~5             ; |Stack|stack_reg6~5             ; combout          ;
; |Stack|stack_reg7[6]            ; |Stack|stack_reg7[6]            ; regout           ;
; |Stack|stack_reg6~6             ; |Stack|stack_reg6~6             ; combout          ;
; |Stack|stack_reg7[7]            ; |Stack|stack_reg7[7]            ; regout           ;
; |Stack|stack_reg6~7             ; |Stack|stack_reg6~7             ; combout          ;
; |Stack|stack_reg7[8]            ; |Stack|stack_reg7[8]            ; regout           ;
; |Stack|stack_reg6~8             ; |Stack|stack_reg6~8             ; combout          ;
; |Stack|stack_reg7[9]            ; |Stack|stack_reg7[9]            ; regout           ;
; |Stack|stack_reg6~9             ; |Stack|stack_reg6~9             ; combout          ;
; |Stack|stack_reg7[10]           ; |Stack|stack_reg7[10]           ; regout           ;
; |Stack|stack_reg6~10            ; |Stack|stack_reg6~10            ; combout          ;
; |Stack|stack_reg7[11]           ; |Stack|stack_reg7[11]           ; regout           ;
; |Stack|stack_reg6~11            ; |Stack|stack_reg6~11            ; combout          ;
; |Stack|stack_reg7[12]           ; |Stack|stack_reg7[12]           ; regout           ;
; |Stack|stack_reg6~12            ; |Stack|stack_reg6~12            ; combout          ;
; |Stack|stack_reg7~0             ; |Stack|stack_reg7~0             ; combout          ;
; |Stack|stack_reg7~1             ; |Stack|stack_reg7~1             ; combout          ;
; |Stack|stack_reg7~2             ; |Stack|stack_reg7~2             ; combout          ;
; |Stack|stack_reg7~3             ; |Stack|stack_reg7~3             ; combout          ;
; |Stack|stack_reg7~4             ; |Stack|stack_reg7~4             ; combout          ;
; |Stack|stack_reg7~5             ; |Stack|stack_reg7~5             ; combout          ;
; |Stack|stack_reg7~6             ; |Stack|stack_reg7~6             ; combout          ;
; |Stack|stack_reg7~7             ; |Stack|stack_reg7~7             ; combout          ;
; |Stack|stack_reg7~8             ; |Stack|stack_reg7~8             ; combout          ;
; |Stack|stack_reg7~9             ; |Stack|stack_reg7~9             ; combout          ;
; |Stack|stack_reg7~10            ; |Stack|stack_reg7~10            ; combout          ;
; |Stack|stack_reg7~11            ; |Stack|stack_reg7~11            ; combout          ;
; |Stack|stack_reg7~12            ; |Stack|stack_reg7~12            ; combout          ;
; |Stack|stack_out[0]             ; |Stack|stack_out[0]             ; padio            ;
; |Stack|stack_out[1]             ; |Stack|stack_out[1]             ; padio            ;
; |Stack|stack_out[8]             ; |Stack|stack_out[8]             ; padio            ;
; |Stack|stack_out[9]             ; |Stack|stack_out[9]             ; padio            ;
; |Stack|stack_out[10]            ; |Stack|stack_out[10]            ; padio            ;
; |Stack|stack_out[11]            ; |Stack|stack_out[11]            ; padio            ;
; |Stack|stack_out[12]            ; |Stack|stack_out[12]            ; padio            ;
; |Stack|stack_in[0]              ; |Stack|stack_in[0]~corein       ; combout          ;
; |Stack|stack_in[1]              ; |Stack|stack_in[1]~corein       ; combout          ;
; |Stack|stack_in[2]              ; |Stack|stack_in[2]~corein       ; combout          ;
; |Stack|stack_in[3]              ; |Stack|stack_in[3]~corein       ; combout          ;
; |Stack|stack_in[4]              ; |Stack|stack_in[4]~corein       ; combout          ;
; |Stack|stack_in[5]              ; |Stack|stack_in[5]~corein       ; combout          ;
; |Stack|stack_in[6]              ; |Stack|stack_in[6]~corein       ; combout          ;
; |Stack|stack_in[7]              ; |Stack|stack_in[7]~corein       ; combout          ;
; |Stack|stack_in[8]              ; |Stack|stack_in[8]~corein       ; combout          ;
; |Stack|stack_in[9]              ; |Stack|stack_in[9]~corein       ; combout          ;
; |Stack|stack_in[10]             ; |Stack|stack_in[10]~corein      ; combout          ;
; |Stack|stack_in[11]             ; |Stack|stack_in[11]~corein      ; combout          ;
; |Stack|stack_in[12]             ; |Stack|stack_in[12]~corein      ; combout          ;
; |Stack|stack_out[0]~reg0feeder  ; |Stack|stack_out[0]~reg0feeder  ; combout          ;
; |Stack|stack_out[1]~reg0feeder  ; |Stack|stack_out[1]~reg0feeder  ; combout          ;
; |Stack|stack_out[8]~reg0feeder  ; |Stack|stack_out[8]~reg0feeder  ; combout          ;
; |Stack|stack_out[10]~reg0feeder ; |Stack|stack_out[10]~reg0feeder ; combout          ;
; |Stack|stack_out[11]~reg0feeder ; |Stack|stack_out[11]~reg0feeder ; combout          ;
+---------------------------------+---------------------------------+------------------+


The following table displays output ports that do not toggle to 0 during simulation.
+--------------------------------------------------------------------------------------+
; Missing 0-Value Coverage                                                             ;
+---------------------------------+---------------------------------+------------------+
; Node Name                       ; Output Port Name                ; Output Port Type ;
+---------------------------------+---------------------------------+------------------+
; |Stack|stack_out[0]~reg0        ; |Stack|stack_out[0]~reg0        ; regout           ;
; |Stack|stack_out[1]~reg0        ; |Stack|stack_out[1]~reg0        ; regout           ;
; |Stack|stack_out[8]~reg0        ; |Stack|stack_out[8]~reg0        ; regout           ;
; |Stack|stack_out[9]~reg0        ; |Stack|stack_out[9]~reg0        ; regout           ;
; |Stack|stack_out[10]~reg0       ; |Stack|stack_out[10]~reg0       ; regout           ;
; |Stack|stack_out[11]~reg0       ; |Stack|stack_out[11]~reg0       ; regout           ;
; |Stack|stack_out[12]~reg0       ; |Stack|stack_out[12]~reg0       ; regout           ;
; |Stack|stack_reg0[0]            ; |Stack|stack_reg0[0]            ; regout           ;
; |Stack|stack_reg0[1]            ; |Stack|stack_reg0[1]            ; regout           ;
; |Stack|stack_reg0[8]            ; |Stack|stack_reg0[8]            ; regout           ;
; |Stack|stack_reg0[9]            ; |Stack|stack_reg0[9]            ; regout           ;
; |Stack|stack_reg0[10]           ; |Stack|stack_reg0[10]           ; regout           ;
; |Stack|stack_reg0[11]           ; |Stack|stack_reg0[11]           ; regout           ;
; |Stack|stack_reg0[12]           ; |Stack|stack_reg0[12]           ; regout           ;
; |Stack|stack_reg1[0]            ; |Stack|stack_reg1[0]            ; regout           ;
; |Stack|stack_reg0~0             ; |Stack|stack_reg0~0             ; combout          ;
; |Stack|stack_reg1[1]            ; |Stack|stack_reg1[1]            ; regout           ;
; |Stack|stack_reg0~2             ; |Stack|stack_reg0~2             ; combout          ;
; |Stack|stack_reg1[8]            ; |Stack|stack_reg1[8]            ; regout           ;
; |Stack|stack_reg0~9             ; |Stack|stack_reg0~9             ; combout          ;
; |Stack|stack_reg1[9]            ; |Stack|stack_reg1[9]            ; regout           ;
; |Stack|stack_reg0~10            ; |Stack|stack_reg0~10            ; combout          ;
; |Stack|stack_reg1[10]           ; |Stack|stack_reg1[10]           ; regout           ;
; |Stack|stack_reg0~11            ; |Stack|stack_reg0~11            ; combout          ;
; |Stack|stack_reg1[11]           ; |Stack|stack_reg1[11]           ; regout           ;
; |Stack|stack_reg0~12            ; |Stack|stack_reg0~12            ; combout          ;
; |Stack|stack_reg1[12]           ; |Stack|stack_reg1[12]           ; regout           ;
; |Stack|stack_reg0~13            ; |Stack|stack_reg0~13            ; combout          ;
; |Stack|stack_reg2[0]            ; |Stack|stack_reg2[0]            ; regout           ;
; |Stack|stack_reg1~0             ; |Stack|stack_reg1~0             ; combout          ;
; |Stack|stack_reg2[1]            ; |Stack|stack_reg2[1]            ; regout           ;
; |Stack|stack_reg1~1             ; |Stack|stack_reg1~1             ; combout          ;
; |Stack|stack_reg2[8]            ; |Stack|stack_reg2[8]            ; regout           ;
; |Stack|stack_reg1~8             ; |Stack|stack_reg1~8             ; combout          ;
; |Stack|stack_reg2[9]            ; |Stack|stack_reg2[9]            ; regout           ;
; |Stack|stack_reg1~9             ; |Stack|stack_reg1~9             ; combout          ;
; |Stack|stack_reg2[10]           ; |Stack|stack_reg2[10]           ; regout           ;
; |Stack|stack_reg1~10            ; |Stack|stack_reg1~10            ; combout          ;
; |Stack|stack_reg2[11]           ; |Stack|stack_reg2[11]           ; regout           ;
; |Stack|stack_reg1~11            ; |Stack|stack_reg1~11            ; combout          ;
; |Stack|stack_reg2[12]           ; |Stack|stack_reg2[12]           ; regout           ;
; |Stack|stack_reg1~12            ; |Stack|stack_reg1~12            ; combout          ;
; |Stack|stack_reg3[0]            ; |Stack|stack_reg3[0]            ; regout           ;
; |Stack|stack_reg2~0             ; |Stack|stack_reg2~0             ; combout          ;
; |Stack|stack_reg3[1]            ; |Stack|stack_reg3[1]            ; regout           ;
; |Stack|stack_reg2~1             ; |Stack|stack_reg2~1             ; combout          ;
; |Stack|stack_reg3[8]            ; |Stack|stack_reg3[8]            ; regout           ;
; |Stack|stack_reg2~8             ; |Stack|stack_reg2~8             ; combout          ;
; |Stack|stack_reg3[9]            ; |Stack|stack_reg3[9]            ; regout           ;
; |Stack|stack_reg2~9             ; |Stack|stack_reg2~9             ; combout          ;
; |Stack|stack_reg3[10]           ; |Stack|stack_reg3[10]           ; regout           ;
; |Stack|stack_reg2~10            ; |Stack|stack_reg2~10            ; combout          ;
; |Stack|stack_reg3[11]           ; |Stack|stack_reg3[11]           ; regout           ;
; |Stack|stack_reg2~11            ; |Stack|stack_reg2~11            ; combout          ;
; |Stack|stack_reg3[12]           ; |Stack|stack_reg3[12]           ; regout           ;
; |Stack|stack_reg2~12            ; |Stack|stack_reg2~12            ; combout          ;
; |Stack|stack_reg4[0]            ; |Stack|stack_reg4[0]            ; regout           ;
; |Stack|stack_reg3~0             ; |Stack|stack_reg3~0             ; combout          ;
; |Stack|stack_reg4[1]            ; |Stack|stack_reg4[1]            ; regout           ;
; |Stack|stack_reg3~1             ; |Stack|stack_reg3~1             ; combout          ;
; |Stack|stack_reg4[8]            ; |Stack|stack_reg4[8]            ; regout           ;
; |Stack|stack_reg3~8             ; |Stack|stack_reg3~8             ; combout          ;
; |Stack|stack_reg4[9]            ; |Stack|stack_reg4[9]            ; regout           ;
; |Stack|stack_reg3~9             ; |Stack|stack_reg3~9             ; combout          ;
; |Stack|stack_reg4[10]           ; |Stack|stack_reg4[10]           ; regout           ;
; |Stack|stack_reg3~10            ; |Stack|stack_reg3~10            ; combout          ;
; |Stack|stack_reg4[11]           ; |Stack|stack_reg4[11]           ; regout           ;
; |Stack|stack_reg3~11            ; |Stack|stack_reg3~11            ; combout          ;
; |Stack|stack_reg4[12]           ; |Stack|stack_reg4[12]           ; regout           ;
; |Stack|stack_reg3~12            ; |Stack|stack_reg3~12            ; combout          ;
; |Stack|stack_reg5[0]            ; |Stack|stack_reg5[0]            ; regout           ;
; |Stack|stack_reg4~0             ; |Stack|stack_reg4~0             ; combout          ;
; |Stack|stack_reg5[1]            ; |Stack|stack_reg5[1]            ; regout           ;
; |Stack|stack_reg4~1             ; |Stack|stack_reg4~1             ; combout          ;
; |Stack|stack_reg5[2]            ; |Stack|stack_reg5[2]            ; regout           ;
; |Stack|stack_reg5[3]            ; |Stack|stack_reg5[3]            ; regout           ;
; |Stack|stack_reg5[4]            ; |Stack|stack_reg5[4]            ; regout           ;
; |Stack|stack_reg5[5]            ; |Stack|stack_reg5[5]            ; regout           ;
; |Stack|stack_reg5[6]            ; |Stack|stack_reg5[6]            ; regout           ;
; |Stack|stack_reg5[7]            ; |Stack|stack_reg5[7]            ; regout           ;
; |Stack|stack_reg5[8]            ; |Stack|stack_reg5[8]            ; regout           ;
; |Stack|stack_reg4~8             ; |Stack|stack_reg4~8             ; combout          ;
; |Stack|stack_reg5[9]            ; |Stack|stack_reg5[9]            ; regout           ;
; |Stack|stack_reg4~9             ; |Stack|stack_reg4~9             ; combout          ;
; |Stack|stack_reg5[10]           ; |Stack|stack_reg5[10]           ; regout           ;
; |Stack|stack_reg4~10            ; |Stack|stack_reg4~10            ; combout          ;
; |Stack|stack_reg5[11]           ; |Stack|stack_reg5[11]           ; regout           ;
; |Stack|stack_reg4~11            ; |Stack|stack_reg4~11            ; combout          ;
; |Stack|stack_reg5[12]           ; |Stack|stack_reg5[12]           ; regout           ;
; |Stack|stack_reg4~12            ; |Stack|stack_reg4~12            ; combout          ;
; |Stack|stack_reg6[0]            ; |Stack|stack_reg6[0]            ; regout           ;
; |Stack|stack_reg5~0             ; |Stack|stack_reg5~0             ; combout          ;
; |Stack|stack_reg6[1]            ; |Stack|stack_reg6[1]            ; regout           ;
; |Stack|stack_reg5~1             ; |Stack|stack_reg5~1             ; combout          ;
; |Stack|stack_reg6[2]            ; |Stack|stack_reg6[2]            ; regout           ;
; |Stack|stack_reg5~2             ; |Stack|stack_reg5~2             ; combout          ;
; |Stack|stack_reg6[3]            ; |Stack|stack_reg6[3]            ; regout           ;
; |Stack|stack_reg5~3             ; |Stack|stack_reg5~3             ; combout          ;
; |Stack|stack_reg6[4]            ; |Stack|stack_reg6[4]            ; regout           ;
; |Stack|stack_reg5~4             ; |Stack|stack_reg5~4             ; combout          ;
; |Stack|stack_reg6[5]            ; |Stack|stack_reg6[5]            ; regout           ;
; |Stack|stack_reg5~5             ; |Stack|stack_reg5~5             ; combout          ;
; |Stack|stack_reg6[6]            ; |Stack|stack_reg6[6]            ; regout           ;
; |Stack|stack_reg5~6             ; |Stack|stack_reg5~6             ; combout          ;
; |Stack|stack_reg6[7]            ; |Stack|stack_reg6[7]            ; regout           ;
; |Stack|stack_reg5~7             ; |Stack|stack_reg5~7             ; combout          ;
; |Stack|stack_reg6[8]            ; |Stack|stack_reg6[8]            ; regout           ;
; |Stack|stack_reg5~8             ; |Stack|stack_reg5~8             ; combout          ;
; |Stack|stack_reg6[9]            ; |Stack|stack_reg6[9]            ; regout           ;
; |Stack|stack_reg5~9             ; |Stack|stack_reg5~9             ; combout          ;
; |Stack|stack_reg6[10]           ; |Stack|stack_reg6[10]           ; regout           ;
; |Stack|stack_reg5~10            ; |Stack|stack_reg5~10            ; combout          ;
; |Stack|stack_reg6[11]           ; |Stack|stack_reg6[11]           ; regout           ;
; |Stack|stack_reg5~11            ; |Stack|stack_reg5~11            ; combout          ;
; |Stack|stack_reg6[12]           ; |Stack|stack_reg6[12]           ; regout           ;
; |Stack|stack_reg5~12            ; |Stack|stack_reg5~12            ; combout          ;
; |Stack|stack_reg7[0]            ; |Stack|stack_reg7[0]            ; regout           ;
; |Stack|stack_reg6~0             ; |Stack|stack_reg6~0             ; combout          ;
; |Stack|stack_reg7[1]            ; |Stack|stack_reg7[1]            ; regout           ;
; |Stack|stack_reg6~1             ; |Stack|stack_reg6~1             ; combout          ;
; |Stack|stack_reg7[2]            ; |Stack|stack_reg7[2]            ; regout           ;
; |Stack|stack_reg6~2             ; |Stack|stack_reg6~2             ; combout          ;
; |Stack|stack_reg7[3]            ; |Stack|stack_reg7[3]            ; regout           ;
; |Stack|stack_reg6~3             ; |Stack|stack_reg6~3             ; combout          ;
; |Stack|stack_reg7[4]            ; |Stack|stack_reg7[4]            ; regout           ;
; |Stack|stack_reg6~4             ; |Stack|stack_reg6~4             ; combout          ;
; |Stack|stack_reg7[5]            ; |Stack|stack_reg7[5]            ; regout           ;
; |Stack|stack_reg6~5             ; |Stack|stack_reg6~5             ; combout          ;
; |Stack|stack_reg7[6]            ; |Stack|stack_reg7[6]            ; regout           ;
; |Stack|stack_reg6~6             ; |Stack|stack_reg6~6             ; combout          ;
; |Stack|stack_reg7[7]            ; |Stack|stack_reg7[7]            ; regout           ;
; |Stack|stack_reg6~7             ; |Stack|stack_reg6~7             ; combout          ;
; |Stack|stack_reg7[8]            ; |Stack|stack_reg7[8]            ; regout           ;
; |Stack|stack_reg6~8             ; |Stack|stack_reg6~8             ; combout          ;
; |Stack|stack_reg7[9]            ; |Stack|stack_reg7[9]            ; regout           ;
; |Stack|stack_reg6~9             ; |Stack|stack_reg6~9             ; combout          ;
; |Stack|stack_reg7[10]           ; |Stack|stack_reg7[10]           ; regout           ;
; |Stack|stack_reg6~10            ; |Stack|stack_reg6~10            ; combout          ;
; |Stack|stack_reg7[11]           ; |Stack|stack_reg7[11]           ; regout           ;
; |Stack|stack_reg6~11            ; |Stack|stack_reg6~11            ; combout          ;
; |Stack|stack_reg7[12]           ; |Stack|stack_reg7[12]           ; regout           ;
; |Stack|stack_reg6~12            ; |Stack|stack_reg6~12            ; combout          ;
; |Stack|stack_reg7~0             ; |Stack|stack_reg7~0             ; combout          ;
; |Stack|stack_reg7~1             ; |Stack|stack_reg7~1             ; combout          ;
; |Stack|stack_reg7~2             ; |Stack|stack_reg7~2             ; combout          ;
; |Stack|stack_reg7~3             ; |Stack|stack_reg7~3             ; combout          ;
; |Stack|stack_reg7~4             ; |Stack|stack_reg7~4             ; combout          ;
; |Stack|stack_reg7~5             ; |Stack|stack_reg7~5             ; combout          ;
; |Stack|stack_reg7~6             ; |Stack|stack_reg7~6             ; combout          ;
; |Stack|stack_reg7~7             ; |Stack|stack_reg7~7             ; combout          ;
; |Stack|stack_reg7~8             ; |Stack|stack_reg7~8             ; combout          ;
; |Stack|stack_reg7~9             ; |Stack|stack_reg7~9             ; combout          ;
; |Stack|stack_reg7~10            ; |Stack|stack_reg7~10            ; combout          ;
; |Stack|stack_reg7~11            ; |Stack|stack_reg7~11            ; combout          ;
; |Stack|stack_reg7~12            ; |Stack|stack_reg7~12            ; combout          ;
; |Stack|stack_out[0]             ; |Stack|stack_out[0]             ; padio            ;
; |Stack|stack_out[1]             ; |Stack|stack_out[1]             ; padio            ;
; |Stack|stack_out[8]             ; |Stack|stack_out[8]             ; padio            ;
; |Stack|stack_out[9]             ; |Stack|stack_out[9]             ; padio            ;
; |Stack|stack_out[10]            ; |Stack|stack_out[10]            ; padio            ;
; |Stack|stack_out[11]            ; |Stack|stack_out[11]            ; padio            ;
; |Stack|stack_out[12]            ; |Stack|stack_out[12]            ; padio            ;
; |Stack|nrst                     ; |Stack|nrst~corein              ; combout          ;
; |Stack|stack_in[0]              ; |Stack|stack_in[0]~corein       ; combout          ;
; |Stack|stack_in[1]              ; |Stack|stack_in[1]~corein       ; combout          ;
; |Stack|stack_in[2]              ; |Stack|stack_in[2]~corein       ; combout          ;
; |Stack|stack_in[3]              ; |Stack|stack_in[3]~corein       ; combout          ;
; |Stack|stack_in[4]              ; |Stack|stack_in[4]~corein       ; combout          ;
; |Stack|stack_in[5]              ; |Stack|stack_in[5]~corein       ; combout          ;
; |Stack|stack_in[6]              ; |Stack|stack_in[6]~corein       ; combout          ;
; |Stack|stack_in[7]              ; |Stack|stack_in[7]~corein       ; combout          ;
; |Stack|stack_in[8]              ; |Stack|stack_in[8]~corein       ; combout          ;
; |Stack|stack_in[9]              ; |Stack|stack_in[9]~corein       ; combout          ;
; |Stack|stack_in[10]             ; |Stack|stack_in[10]~corein      ; combout          ;
; |Stack|stack_in[11]             ; |Stack|stack_in[11]~corein      ; combout          ;
; |Stack|stack_in[12]             ; |Stack|stack_in[12]~corein      ; combout          ;
; |Stack|nrst~clkctrl             ; |Stack|nrst~clkctrl             ; outclk           ;
; |Stack|stack_out[0]~reg0feeder  ; |Stack|stack_out[0]~reg0feeder  ; combout          ;
; |Stack|stack_out[1]~reg0feeder  ; |Stack|stack_out[1]~reg0feeder  ; combout          ;
; |Stack|stack_out[8]~reg0feeder  ; |Stack|stack_out[8]~reg0feeder  ; combout          ;
; |Stack|stack_out[10]~reg0feeder ; |Stack|stack_out[10]~reg0feeder ; combout          ;
; |Stack|stack_out[11]~reg0feeder ; |Stack|stack_out[11]~reg0feeder ; combout          ;
+---------------------------------+---------------------------------+------------------+


+---------------------+
; Simulator INI Usage ;
+--------+------------+
; Option ; Usage      ;
+--------+------------+


+--------------------+
; Simulator Messages ;
+--------------------+
Info: *******************************************************************
Info: Running Quartus II Simulator
    Info: Version 9.1 Build 350 03/24/2010 Service Pack 2 SJ Web Edition
    Info: Processing started: Wed May 11 11:32:22 2022
Info: Command: quartus_sim --read_settings_files=on --write_settings_files=off Stack -c Stack
Info: Using vector source file "C:/Users/GABRIEL/Desktop/vhdl/TrabsReconfig-main/trab2/Stack/Stack.vwf"
Info: Overwriting simulation input file with simulation results
    Info: A backup of Stack.vwf called Stack.sim_ori.vwf has been created in the db folder
Info: Option to preserve fewer signal transitions to reduce memory requirements is enabled
    Info: Simulation has been partitioned into sub-simulations according to the maximum transition count determined by the engine. Transitions from memory will be flushed out to disk at the end of each sub-simulation to reduce memory requirements.
Info: Simulation partitioned into 1 sub-simulations
Info: Simulation coverage is      31.06 %
Info: Number of transitions in simulation is 2419
Info: Vector file Stack.vwf is saved in VWF text format. You can compress it into CVWF format in order to reduce file size. For more details please refer to the Quartus II Help.
Info: Quartus II Simulator was successful. 0 errors, 0 warnings
    Info: Peak virtual memory: 148 megabytes
    Info: Processing ended: Wed May 11 11:32:22 2022
    Info: Elapsed time: 00:00:00
    Info: Total CPU time (on all processors): 00:00:00


